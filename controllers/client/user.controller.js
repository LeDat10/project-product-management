const User = require("../../models/user.model");
const Confirm = require("../../models/confirm.model");
const jwt = require("jsonwebtoken");
const argon2 = require("argon2");


const generateHelper = require("../../helper/generate");
const sendMailHelper = require("../../helper/sendMail");


// [POST] /api/users/register
module.exports.register = async (req, res) => {
    try {
        const existEmail = await User.findOne({
            email: req.body.email,
            deleted: false,
            status: "active"
        });

        if (existEmail) {
            res.json({
                code: 409,
                message: "Email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!"
            });
            return;
        };

        const userIsVerified = await User.findOne({
            email: req.body.email,
            isVerified: false,
            status: "inactive"
        }).select("email phone");

        if (userIsVerified) {
            const otp = generateHelper.generateRadomNumber(6);

            const objectConfirm = {
                email: userIsVerified.email,
                otp: otp,
                expireAt: Date.now()
            };

            const cofirmUser = Confirm(objectConfirm);
            await cofirmUser.save();

            const subject = "M√£ OTP x√°c th·ª±c t√†i kho·∫£n";
            const html = `
            <div style="font-family: Arial, sans-serif; max-width: 500px; padding: 20px; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9; text-align: center;">
                <h2 style="color: #333;">üéâ X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
                <p>Ch√†o b·∫°n,</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng nh·∫≠p m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
                <h3 style="font-size: 24px; color: #ff5722; background: #ffcc00; padding: 10px; text-align: center; border-radius: 5px; display: inline-block;">${otp}</h3>
                <p><b>L∆∞u √Ω:</b> M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>3 ph√∫t</b>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>
                <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, h√£y b·ªè qua email n√†y.</p>
                <br>
                <p>Tr√¢n tr·ªçng,</p>
                <p><b>ƒê·ªôi ng≈© h·ªó tr·ª£ nh√≥m 2 ƒë·ªì √°n ƒëa n·ªÅn t·∫£ng.</b></p>
            </div>
        `;

            const email = userIsVerified.email;

            sendMailHelper.sendMail(email, subject, html);

            res.json({
                code: 200,
                message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email ƒëƒÉng k√Ω. Vui l√≤ng x√°c th·ª±c t√†i kho·∫£n!",
                user: userIsVerified
            });
            return;
        };

        const userToken = jwt.sign({}, process.env.JWT_SECRET);
        req.body.token = userToken;
        req.body.password = await argon2.hash(req.body.password);
        const user = User(req.body);
        await user.save();

        const userRegister = await User.findOne({
            _id: user.id
        }).select("email phone");

        const otp = generateHelper.generateRadomNumber(6);

        const objectConfirm = {
            email: userRegister.email,
            otp: otp,
            expireAt: Date.now()
        };

        const cofirmUser = Confirm(objectConfirm);
        await cofirmUser.save();

        const subject = "M√£ OTP x√°c th·ª±c t√†i kho·∫£n";
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 500px; padding: 20px; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9; text-align: center;">
                <h2 style="color: #333;">üéâ X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
                <p>Ch√†o b·∫°n,</p>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng nh·∫≠p m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n:</p>
                <h3 style="font-size: 24px; color: #ff5722; background: #ffcc00; padding: 10px; text-align: center; border-radius: 5px; display: inline-block;">${otp}</h3>
                <p><b>L∆∞u √Ω:</b> M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>3 ph√∫t</b>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.</p>
                <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, h√£y b·ªè qua email n√†y.</p>
                <br>
                <p>Tr√¢n tr·ªçng,</p>
                <p><b>ƒê·ªôi ng≈© h·ªó tr·ª£ nh√≥m 2 ƒë·ªì √°n ƒëa n·ªÅn t·∫£ng.</b></p>
            </div>
        `;

        const email = userRegister.email;

        sendMailHelper.sendMail(email, subject, html);

        res.json({
            code: 200,
            message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email ƒëƒÉng k√Ω. Vui l√≤ng x√°c th·ª±c t√†i kho·∫£n!",
            user: userRegister
        });
    } catch (error) {
        res.json({
            code: 400,
            message: "ƒêƒÉng k√Ω t√†i kho·∫£n th·∫•t b·∫°i!"
        });
    };
};


// [POST] /api/users/register/confirmOTP
module.exports.confirmOTP = async (req, res) => {
    try {
        const email = req.body.email;
        const otp = req.body.otp;

        const result = await Confirm.findOne({
            email: email,
            otp: otp
        });

        if (!result) {
            res.json({
                code: 400,
                message: "M√£ OTP kh√¥ng h·ª£p l·ªá!"
            });
            return;
        };

        await User.updateOne({
            email: email
        }, {
            status: "active",
            isVerified: true
        });

        res.json({
            code: 200,
            message: "X√°c th·ª±c v√† ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!"
        });
    } catch (error) {
        res.json({
            code: 400,
            message: "X√°c th·ª±c v√† ƒëƒÉng k√Ω t√†i kho·∫£n th·∫•t b·∫°i!"
        });
    };
};

//[POST] /api/users/login
module.exports.login = async (req, res) => {
    try {
        const email = req.body.email;
        const password = req.body.password;

        const user = await User.findOne({
            email: email,
            deleted: false,
            status: "active",
            isVerified: true
        });

        if (!user) {
            res.json({
                code: 401,
                message: "Email ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i!"
            });
            return;
        };

        const match = await argon2.verify(user.password, password);

        if (!match) {
            res.json({
                code: 401,
                message: "M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng!"
            });
            return;
        };

        const payload = {
            id: user.id,
            email: user.email,
            fullName: user.fullName,
            tokenVersion: user.tokenVersion,
        };

        const token = jwt.sign(
            payload,
            process.env.JWT_SECRET,
            {
                expiresIn: process.env.JWT_EXPIRE
            }
        );


        res.json({
            code: 200,
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
            token: token
        });

    } catch (error) {
        res.json({
            code: 400,
            message: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!"
        });
    };
};

//[POST] /api/users/password/forgot
module.exports.forgot = async (req, res) => {
    const email = req.body.email;

    const user = await User.findOne({
        email: email,
        deleted: false,
        status: "active",
        isVerified: true
    });

    if (!user) {
        res.json({
            code: 404,
            message: "Email kh√¥ng t·ªìn t·∫°i!"
        });
        return;
    };

    const otp = generateHelper.generateRadomNumber(6);
    const objectForgot = {
        email: email,
        otp: otp,
        expireAt: Date.now()
    };

    const forgotPassword = Confirm(objectForgot);
    await forgotPassword.save();

    const subject = `M√£ OTP x√°c minh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u`;

    const html = `
            <div style="font-family: Arial, sans-serif; max-width: 500px; padding: 20px; border: 1px solid #ddd; border-radius: 10px; background-color: #f9f9f9;">
                <h2 style="color: #333;">Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
                <p>Ch√†o b·∫°n,</p>
                <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c:</p>
                <h3 style="background-color: #ffcc00; padding: 10px; text-align: center; border-radius: 5px;">${otp}</h3>
                <p><b>L∆∞u √Ω:</b> M√£ n√†y s·∫Ω h·∫øt h·∫°n sau <b>3 ph√∫t</b>.Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y cho b·∫•t k·ª≥ ai.</p>
                <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, h√£y b·ªè qua email n√†y ho·∫∑c li√™n h·ªá h·ªó tr·ª£.</p>
                <br>
                <p>Tr√¢n tr·ªçng,</p>
                <p><b>ƒê·ªôi ng≈© h·ªó tr·ª£ nh√≥m 2 ƒë·ªì √°n ƒëa n·ªÅn t·∫£ng.</b></p>
            </div>
        `;

    sendMailHelper.sendMail(email, subject, html);


    try {
        res.json({
            code: 200,
            message: "ƒê√£ g·ª≠i m√£ OTP qua email!"
        });
    } catch (error) {
        res.json({
            code: 400,
            message: "G·ª≠i m√£ OTP qua email th·∫•t b·∫°i!"
        });
    };
};

// [POST] /api/users/password/otp
module.exports.otpPassword = async (req, res) => {
    try {
        const { email, otp } = req.body;

        const userConfirm = await Confirm.findOne({
            email: email,
            otp: otp
        });

        if (!userConfirm) {
            return res.json({
                code: 400,
                message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!"
            });
        };

        const token = jwt.sign(
            { email: userConfirm.email },
            process.env.JWT_SECRET,
            { expiresIn: "15m" }
        );

        res.json({
            code: 200,
            message: "X√°c th·ª±c email th√†nh c√¥ng!",
            tokenReset: token
        });

    } catch (error) {
        res.json({
            code: 400,
            message: "X√°c th·ª±c email th·∫•t b·∫°i!"
        });
    };
};

//[POST] /api/users/password/reset
module.exports.resetPassword = async (req, res) => {
    try {
        const { token, newPassword } = req.body;

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findOne({ email: decoded.email });

        if (!user) return res.json({
            code: 400,
            message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"
        });

        const isSame = await argon2.verify(user.password, newPassword);

        if (isSame) {
            return res.json({
                code: 400,
                message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng m·∫≠t kh·∫©u c≈©"
            });
        };

        const hashedPassword = await argon2.hash(newPassword);
        user.password = hashedPassword;
        await user.save();

        return res.json({
            code: 200,
            message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng"
        });
    } catch (error) {
        return res.json({
            code: 400,
            message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"
        });
    };
};

module.exports.getInfoUser = async (req, res) => {
    try {
        const userId = req.user._id;
        const user = await User.findById(userId).select("fullName avatar phone email isVerified status");
        res.json({
            code: 200,
            message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!",
            user: user
        });
    } catch (error) {
        res.json({
            code: 400,
            message: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng th·∫•t b·∫°i!"
        });
    };
};

// [POST] /api/users/logout
module.exports.logout = async (req, res) => {
    try {
        const userId = req.user._id;
        await User.updateOne({
            _id: userId,
            deleted: false,
            isVerified: true,
            status: "active"
        }, { $inc: { tokenVersion: 1 } });

        return res.json({
            code: 200,
            message: "ƒêƒÉng xu·∫•t t√†i kho·∫£n th√†nh c√¥ng!"
        });
    } catch (error) {
        return res.json({
            code: 400,
            message: "ƒêƒÉng xu·∫•t t√†i kho·∫£n th·∫•t b·∫°i!"
        });
    };
};

// [PATCH] /api/users/edit
module.exports.edit = async (req, res) => {
    try {
        const id = req.user._id;
        if (req.body.password) {
            req.body.password = await argon2.hash(req.body.password);
        };

        await User.updateOne({
            _id: id
        }, req.body);
        res.json({
            code: 200,
            message: "Ch·ªânh s·ª≠a t√†i kho·∫£n th√†nh c√¥ng!"
        });
    } catch (error) {
        res.json({
            code: 400,
            message: "Ch·ªânh s·ª≠a t√†i kho·∫£n th·∫•t b·∫°i!"
        });
    }
};